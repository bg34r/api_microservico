name: Go

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  
jobs:
  test-coverage:
    runs-on: ubuntu-latest
    outputs:
      coverage-passed: ${{ steps.coverage-check.outputs.passed }}
      coverage-percentage: ${{ steps.coverage-check.outputs.coverage }}
    
    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necessário para SonarCloud

      - name: Configurar Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Instalar dependências
        run: go mod download

      - name: Executar testes com cobertura
        run: |
          echo "🔍 Executando todos os testes com cobertura..."
          go test -v -coverprofile=coverage.out ./...
          echo "📊 Gerando relatório..."
          go tool cover -func=coverage.out > coverage.txt
          echo "📋 Relatório gerado:"
          cat coverage.txt

      - name: Verificar limite de cobertura
        id: coverage-check
        run: |
          echo "📊 Analisando cobertura de testes..."
          
          # Verificar se o arquivo existe
          if [ ! -f coverage.out ]; then
            echo "❌ Arquivo coverage.out não foi encontrado!"
            exit 1
          fi
          
          # Extrair cobertura
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          
          if [ -z "$COVERAGE" ]; then
            echo "❌ Não foi possível extrair a porcentagem de cobertura!"
            exit 1
          fi
          
          echo "🎯 RESULTADO DA COBERTURA:"
          echo "   • Cobertura atual: ${COVERAGE}%"
          echo "   • Limite mínimo: 70%"
          
          # Verificar se atende o limite usando awk (mais confiável que bc)
          if awk "BEGIN {exit !($COVERAGE >= 70)}"; then
            echo ""
            echo "✅ SUCESSO: Cobertura de ${COVERAGE}% atende o limite mínimo de 70%"
            echo "🚀 Pull Request pode prosseguir!"
            echo "passed=true" >> $GITHUB_OUTPUT
            echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
          else
            echo ""
            echo "❌ FALHA: Cobertura de ${COVERAGE}% está abaixo do limite mínimo de 70%"
            echo "📈 Adicione mais testes para atingir o requisito"
            echo "passed=false" >> $GITHUB_OUTPUT
            echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Análise SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        if: always()  # Executar mesmo se a cobertura falhar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Upload dos relatórios de cobertura
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: relatorio-cobertura
          path: |
            coverage.out
            coverage.txt

  build:
    needs: test-coverage
    if: needs.test-coverage.outputs.coverage-passed == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Fazer checkout do código
        uses: actions/checkout@v4
        
      - name: Configurar Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          
      - name: Compilar aplicação
        run: go build -v -o main main.go
  
      - name: Upload do artefato de build
        uses: actions/upload-artifact@v4
        with:
          name: programa
          path: main 

  docker:
    needs: [test-coverage, build]
    if: needs.test-coverage.outputs.coverage-passed == 'true'
    uses: ./.github/workflows/Docker.yml
    secrets: inherit

  coverage-gate:
    needs: test-coverage
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Controle de Cobertura
        run: |
          echo "🎯 GATE DE COBERTURA - Resultado Final"
          echo "════════════════════════════════════════"
          
          if [ "${{ needs.test-coverage.outputs.coverage-passed }}" != "true" ]; then
            echo "❌ STATUS: REJEITADO"
            echo "📊 Cobertura: ${{ needs.test-coverage.outputs.coverage-percentage }}% (abaixo de 70%)"
            echo "🚫 Pull Request bloqueado por cobertura insuficiente"
            echo ""
            echo "📋 PRÓXIMOS PASSOS:"
            echo "   1. Adicione mais testes unitários"
            echo "   2. Execute 'go test -cover ./...' localmente"
            echo "   3. Foque nos arquivos com menor cobertura"
            echo "   4. Faça novo commit quando atingir 70%+"
            exit 1
          else
            echo "✅ STATUS: APROVADO"
            echo "📊 Cobertura: ${{ needs.test-coverage.outputs.coverage-percentage }}% (acima de 70%)"
            echo "🎉 Requisitos de cobertura atendidos"
            echo "🚀 PR liberado para merge na branch main!"
          fi